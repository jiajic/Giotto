% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/spatial_genes.R
\name{binSpect}
\alias{binSpect}
\alias{binSpectSingleMatrix}
\alias{binSpectSingle}
\alias{binSpectMulti}
\title{binSpect}
\usage{
binSpect(
  gobject,
  spat_unit = NULL,
  feat_type = NULL,
  bin_method = c("kmeans", "rank"),
  expression_values = c("normalized", "scaled", "custom"),
  subset_feats = NULL,
  spatial_network_name = "Delaunay_network",
  spatial_network_k = NULL,
  reduce_network = FALSE,
  kmeans_algo = c("kmeans", "kmeans_arma", "kmeans_arma_subset"),
  nstart = 3,
  iter_max = 10,
  extreme_nr = 50,
  sample_nr = 50,
  percentage_rank = 30,
  do_fisher_test = TRUE,
  adjust_method = "fdr",
  calc_hub = FALSE,
  hub_min_int = 3,
  get_av_expr = TRUE,
  get_high_expr = TRUE,
  implementation = c("data.table", "simple", "matrix"),
  group_size = "automatic",
  do_parallel = TRUE,
  cores = NA,
  verbose = TRUE,
  knn_params = NULL,
  set.seed = deprecated(),
  seed = 1234,
  bin_matrix = NULL,
  summarize = c("p.value", "adj.p.value"),
  return_gobject = FALSE
)

binSpectSingleMatrix(
  expression_matrix,
  spatial_network = NULL,
  bin_matrix = NULL,
  bin_method = c("kmeans", "rank"),
  subset_feats = NULL,
  kmeans_algo = c("kmeans", "kmeans_arma", "kmeans_arma_subset"),
  nstart = 3,
  iter_max = 10,
  extreme_nr = 50,
  sample_nr = 50,
  percentage_rank = 30,
  do_fisher_test = TRUE,
  adjust_method = "fdr",
  calc_hub = FALSE,
  hub_min_int = 3,
  get_av_expr = TRUE,
  get_high_expr = TRUE,
  implementation = c("data.table", "simple", "matrix"),
  group_size = "automatic",
  do_parallel = TRUE,
  cores = NA,
  verbose = FALSE,
  set.seed = deprecated(),
  seed = 1234
)

binSpectSingle(
  gobject,
  spat_unit = NULL,
  feat_type = NULL,
  bin_method = c("kmeans", "rank"),
  expression_values = c("normalized", "scaled", "custom"),
  subset_feats = NULL,
  spatial_network_name = "Delaunay_network",
  reduce_network = FALSE,
  kmeans_algo = c("kmeans", "kmeans_arma", "kmeans_arma_subset"),
  nstart = 3,
  iter_max = 10,
  extreme_nr = 50,
  sample_nr = 50,
  percentage_rank = 30,
  do_fisher_test = TRUE,
  adjust_method = "fdr",
  calc_hub = FALSE,
  hub_min_int = 3,
  get_av_expr = TRUE,
  get_high_expr = TRUE,
  implementation = c("data.table", "simple", "matrix"),
  group_size = "automatic",
  do_parallel = TRUE,
  cores = NA,
  verbose = TRUE,
  set.seed = deprecated(),
  seed = 1234,
  bin_matrix = NULL
)

binSpectMulti(
  gobject,
  feat_type = NULL,
  spat_unit = NULL,
  bin_method = c("kmeans", "rank"),
  expression_values = c("normalized", "scaled", "custom"),
  subset_feats = NULL,
  spatial_network_k = c(5, 10, 20),
  reduce_network = FALSE,
  kmeans_algo = c("kmeans", "kmeans_arma", "kmeans_arma_subset"),
  nstart = 3,
  iter_max = 10,
  extreme_nr = 50,
  sample_nr = 50,
  percentage_rank = c(10, 30),
  do_fisher_test = TRUE,
  adjust_method = "fdr",
  calc_hub = FALSE,
  hub_min_int = 3,
  get_av_expr = TRUE,
  get_high_expr = TRUE,
  implementation = c("data.table", "simple", "matrix"),
  group_size = "automatic",
  do_parallel = TRUE,
  cores = NA,
  verbose = TRUE,
  knn_params = NULL,
  set.seed = deprecated(),
  seed = 1234,
  summarize = c("adj.p.value", "p.value")
)
}
\arguments{
\item{gobject}{giotto object}

\item{spat_unit}{spatial unit}

\item{feat_type}{feature type}

\item{bin_method}{method to binarize gene expression}

\item{expression_values}{expression values to use}

\item{subset_feats}{only select a subset of features to test}

\item{spatial_network_name}{name of spatial network to use
(default = 'spatial_network')}

\item{spatial_network_k}{different k's for a spatial kNN to evaluate}

\item{reduce_network}{default uses the full network}

\item{kmeans_algo}{kmeans algorithm to use
(kmeans, kmeans_arma, kmeans_arma_subset)}

\item{nstart}{kmeans: nstart parameter}

\item{iter_max}{kmeans: iter.max parameter}

\item{extreme_nr}{number of top and bottom cells (see details)}

\item{sample_nr}{total number of cells to sample (see details)}

\item{percentage_rank}{percentage of top cells for binarization}

\item{do_fisher_test}{perform fisher test}

\item{adjust_method}{p-value adjusted method to use
(see \code{\link[stats]{p.adjust}})}

\item{calc_hub}{calculate the number of hub cells}

\item{hub_min_int}{minimum number of cell-cell interactions for a hub cell}

\item{get_av_expr}{calculate the average expression per gene of the high
expressing cells}

\item{get_high_expr}{calculate the number of high expressing cells  per gene}

\item{implementation}{enrichment implementation (data.table, simple, matrix)}

\item{group_size}{number of genes to process together with data.table
implementation (default = automatic)}

\item{do_parallel}{run calculations in parallel with mclapply}

\item{cores}{number of cores to use if \code{do_parallel = TRUE}}

\item{verbose}{be verbose}

\item{knn_params}{list of parameters to create spatial kNN network}

\item{set.seed}{deprecated. Use \code{seed} param instead}

\item{seed}{seed for kmeans binarization. When \code{NULL}, no seed is set.
Otherwise, accepts a numeric input that will be used as seed.}

\item{bin_matrix}{a binarized matrix, when provided it will skip the
binarization process}

\item{summarize}{summarize the p-values or adjusted p-values}

\item{return_gobject}{whether to return values attached to the gobject or
separately (default)}

\item{expression_matrix}{expression matrix}

\item{spatial_network}{spatial network in data.table format}
}
\value{
data.table with results (see details)
}
\description{
Previously: \code{binGetSpatialGenes()}. \cr
BinSpect (Binary Spatial Extraction of genes) is a fast computational method
that identifies genes with a spatially coherent expression pattern. \cr
There are several functions documented together here, mainly differing in
how to provide expression and spatial connectivity/networks information.
When data is in a \code{giotto} object, use \code{binSpect()} which wraps
\code{binSpectSingle()} and \code{binSpectMulti()}.
}
\details{
We provide two ways to identify spatial genes based on gene
expression binarization.
Both methods are identicial except for how binarization is performed.
\enumerate{
\item \strong{binarize:} Each gene is binarized (0 or 1) in each cell with
\strong{kmeans} (k = 2) or based on \strong{rank} percentile
\item \strong{network:} All cells are connected through a spatial network based
on the physical coordinates
\item \strong{contingency table:} A contingency table is calculated based on all
edges of neighboring cells and the binarized expression
(0-0, 0-1, 1-0 or 1-1)
\item For each gene an odds-ratio (OR) and fisher.test (optional) is
calculated
}

Three different kmeans algorithms have been implemented:
\enumerate{
\item \strong{kmeans:} default, see \code{\link[stats]{kmeans}}
\item \strong{kmeans_arma:} from ClusterR, see \code{\link[ClusterR]{KMeans_arma}}
\item \strong{kmeans_arma_subst:} from ClusterR, see
\code{\link[ClusterR]{KMeans_arma}}, but randomly subsets the vector
for each gene to increase speed. Change extreme_nr and sample_nr for
control.
}

Other statistics are provided (optional):
\itemize{
\item Number of cells with high expression (binary = 1)
\item Average expression of each gene within high expressing cells
\item Number of hub cells, these are high expressing cells that have a user
defined number of high expressing neighbors
}

By selecting a subset of likely spatial genes
(e.g. soft thresholding highly variable genes) can accelerate the speed.
The simple implementation is usually faster, but lacks the possibility to
run in parallel and to calculate hub cells.\cr
The data.table implementation might be more appropriate for large datasets
by setting the \code{group_size} (number of genes) parameter to divide the
workload.
}
\section{Functions}{
\itemize{
\item \code{binSpectSingleMatrix()}: binSpect for a single spatial network and a provided
expression matrix

\item \code{binSpectSingle()}: binSpect for a single spatial network

\item \code{binSpectMulti()}: binSpect for multiple spatial kNN networks

}}
\examples{
g <- GiottoData::loadGiottoMini("visium")

binSpect(g)

binSpectSingle(g)

g_expression <- getExpression(g, output = "matrix")
g_spat_net <- getSpatialNetwork(g, output = "networkDT")

binSpectSingleMatrix(
    expression_matrix = g_expression,
    spatial_network = g_spat_net
)

}
